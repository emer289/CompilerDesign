// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: test.flex

import java.io.FileReader;
import java.io.FileNotFoundException;
import java.io.IOException;

class Yytoken {
  public String type;
  public Object value;
  public Yytoken(String type) {
    this.type = type;
  }
  public Yytoken(String type, Object value) {
    this.type = type;
    this.value = value;
  }
}


// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
class Yylex {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500"+
    "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00"+
    "\1\u1d00\1\u1e00\12\u1f00\1\u2000\1\u2100\1\u2200\1\u1f00\1\u2300"+
    "\1\u2400\2\u1f00\31\u0100\1\u2500\121\u0100\1\u2600\4\u0100\1\u2700"+
    "\1\u0100\1\u2800\1\u2900\1\u2a00\1\u2b00\1\u2c00\1\u2d00\53\u0100"+
    "\1\u2e00\10\u2f00\31\u1f00\1\u0100\1\u3000\1\u3100\1\u0100\1\u3200"+
    "\1\u3300\1\u3400\1\u3500\1\u3600\1\u3700\1\u3800\1\u3900\1\u3a00"+
    "\1\u0100\1\u3b00\1\u3c00\1\u3d00\1\u3e00\1\u3f00\1\u4000\1\u4100"+
    "\1\u4200\1\u4300\1\u4400\1\u4500\1\u4600\1\u4700\1\u4800\1\u4900"+
    "\1\u4a00\1\u4b00\1\u4c00\1\u4d00\1\u4e00\1\u1f00\1\u4f00\1\u5000"+
    "\1\u5100\1\u5200\3\u0100\1\u5300\1\u5400\1\u5500\12\u1f00\4\u0100"+
    "\1\u5600\17\u1f00\2\u0100\1\u5700\41\u1f00\2\u0100\1\u5800\1\u5900"+
    "\2\u1f00\1\u5a00\1\u5b00\27\u0100\1\u5c00\4\u0100\1\u5d00\1\u5e00"+
    "\42\u1f00\1\u0100\1\u5f00\1\u6000\11\u1f00\1\u6100\24\u1f00\1\u6200"+
    "\1\u6300\1\u1f00\1\u6400\1\u6500\1\u6600\1\u6700\2\u1f00\1\u6800"+
    "\5\u1f00\1\u6900\1\u6a00\1\u6b00\5\u1f00\1\u6c00\1\u6d00\2\u1f00"+
    "\1\u6e00\1\u1f00\1\u6f00\14\u1f00\1\u7000\4\u1f00\246\u0100\1\u7100"+
    "\20\u0100\1\u7200\1\u7300\25\u0100\1\u7400\34\u0100\1\u7500\14\u1f00"+
    "\2\u0100\1\u7600\5\u1f00\23\u0100\1\u7700\u0aec\u1f00\1\u7800\1\u7900"+
    "\u02fe\u1f00";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\4\1\5\16\0\4\6"+
    "\1\1\1\6\1\7\1\6\1\10\3\6\1\11\1\12"+
    "\1\13\1\14\1\6\1\15\1\6\1\16\12\17\1\6"+
    "\1\20\1\6\1\21\3\6\22\10\1\22\7\10\1\6"+
    "\1\23\2\6\1\10\1\6\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\1\34\2\10\1\35\1\36"+
    "\1\37\1\40\1\41\1\10\1\42\1\43\1\44\1\45"+
    "\1\46\4\10\1\47\1\6\1\50\1\6\6\0\1\51"+
    "\32\0\2\6\4\10\4\6\1\10\2\6\1\0\7\6"+
    "\1\10\4\6\1\10\5\6\27\10\1\6\37\10\1\6"+
    "\u01ca\10\4\6\14\10\16\6\5\10\7\6\1\10\1\6"+
    "\1\10\21\6\160\0\5\10\1\6\2\10\2\6\4\10"+
    "\1\6\1\10\6\6\1\10\1\6\3\10\1\6\1\10"+
    "\1\6\24\10\1\6\123\10\1\6\213\10\1\6\5\0"+
    "\2\6\246\10\1\6\46\10\2\6\1\10\6\6\51\10"+
    "\6\6\1\10\1\6\55\0\1\6\1\0\1\6\2\0"+
    "\1\6\2\0\1\6\1\0\10\6\33\10\4\6\4\10"+
    "\15\6\6\0\5\6\1\10\4\6\13\0\1\6\1\0"+
    "\3\6\53\10\37\0\4\6\2\10\1\0\143\10\1\6"+
    "\1\10\10\0\1\6\6\0\2\10\2\0\1\6\4\0"+
    "\2\10\12\0\3\10\2\6\1\10\17\6\1\0\1\10"+
    "\1\0\36\10\33\0\2\6\131\10\13\0\1\10\16\6"+
    "\12\0\41\10\11\0\2\10\4\6\1\10\2\6\1\0"+
    "\30\10\4\0\1\10\11\0\1\10\3\0\1\10\5\0"+
    "\22\6\31\10\3\0\4\6\13\10\65\6\25\10\1\6"+
    "\22\10\13\6\61\0\66\10\3\0\1\10\22\0\1\10"+
    "\7\0\12\10\2\0\2\6\12\0\1\6\20\10\3\0"+
    "\1\6\10\10\2\6\2\10\2\6\26\10\1\6\7\10"+
    "\1\6\1\10\3\6\4\10\2\6\1\0\1\10\7\0"+
    "\2\6\2\0\2\6\3\0\1\10\10\6\1\0\4\6"+
    "\2\10\1\6\3\10\2\0\2\6\12\0\4\10\7\6"+
    "\2\10\1\6\1\0\2\6\3\0\1\6\6\10\4\6"+
    "\2\10\2\6\26\10\1\6\7\10\1\6\2\10\1\6"+
    "\2\10\1\6\2\10\2\6\1\0\1\6\5\0\4\6"+
    "\2\0\2\6\3\0\3\6\1\0\7\6\4\10\1\6"+
    "\1\10\7\6\14\0\3\10\1\0\13\6\3\0\1\6"+
    "\11\10\1\6\3\10\1\6\26\10\1\6\7\10\1\6"+
    "\2\10\1\6\5\10\2\6\1\0\1\10\10\0\1\6"+
    "\3\0\1\6\3\0\2\6\1\10\17\6\2\10\2\0"+
    "\2\6\12\0\1\6\1\10\7\6\1\10\6\0\1\6"+
    "\3\0\1\6\10\10\2\6\2\10\2\6\26\10\1\6"+
    "\7\10\1\6\2\10\1\6\5\10\2\6\1\0\1\10"+
    "\7\0\2\6\2\0\2\6\3\0\7\6\3\0\4\6"+
    "\2\10\1\6\3\10\2\0\2\6\12\0\1\6\1\10"+
    "\20\6\1\0\1\10\1\6\6\10\3\6\3\10\1\6"+
    "\4\10\3\6\2\10\1\6\1\10\1\6\2\10\3\6"+
    "\2\10\3\6\3\10\3\6\14\10\4\6\5\0\3\6"+
    "\3\0\1\6\4\0\2\6\1\10\6\6\1\0\16\6"+
    "\12\0\11\6\1\10\6\6\5\0\10\10\1\6\3\10"+
    "\1\6\27\10\1\6\20\10\3\6\1\10\7\0\1\6"+
    "\3\0\1\6\4\0\7\6\2\0\1\6\3\10\5\6"+
    "\2\10\2\0\2\6\12\0\20\6\1\10\3\0\1\6"+
    "\10\10\1\6\3\10\1\6\27\10\1\6\12\10\1\6"+
    "\5\10\2\6\1\0\1\10\7\0\1\6\3\0\1\6"+
    "\4\0\7\6\2\0\7\6\1\10\1\6\2\10\2\0"+
    "\2\6\12\0\1\6\2\10\15\6\4\0\11\10\1\6"+
    "\3\10\1\6\51\10\2\0\1\10\7\0\1\6\3\0"+
    "\1\6\4\0\1\10\5\6\3\10\1\0\7\6\3\10"+
    "\2\0\2\6\12\0\12\6\6\10\1\6\3\0\1\6"+
    "\22\10\3\6\30\10\1\6\11\10\1\6\1\10\2\6"+
    "\7\10\3\6\1\0\4\6\6\0\1\6\1\0\1\6"+
    "\10\0\6\6\12\0\2\6\2\0\15\6\60\10\1\0"+
    "\2\10\7\0\4\6\10\10\10\0\1\6\12\0\47\6"+
    "\2\10\1\6\1\10\1\6\5\10\1\6\30\10\1\6"+
    "\1\10\1\6\12\10\1\0\2\10\11\0\1\10\2\6"+
    "\5\10\1\6\1\10\1\6\6\0\2\6\12\0\2\6"+
    "\4\10\40\6\1\10\27\6\2\0\6\6\12\0\13\6"+
    "\1\0\1\6\1\0\1\6\1\0\4\6\2\0\10\10"+
    "\1\6\44\10\4\6\24\0\1\6\2\0\5\10\13\0"+
    "\1\6\44\0\11\6\1\0\71\6\53\10\24\0\1\10"+
    "\12\0\6\6\6\10\4\0\4\10\3\0\1\10\3\0"+
    "\2\10\7\0\3\10\4\0\15\10\14\0\1\10\17\0"+
    "\2\6\46\10\1\6\1\10\5\6\1\10\2\6\53\10"+
    "\1\6\115\10\1\6\4\10\2\6\7\10\1\6\1\10"+
    "\1\6\4\10\2\6\51\10\1\6\4\10\2\6\41\10"+
    "\1\6\4\10\2\6\7\10\1\6\1\10\1\6\4\10"+
    "\2\6\17\10\1\6\71\10\1\6\4\10\2\6\103\10"+
    "\2\6\3\0\40\6\20\10\20\6\126\10\2\6\6\10"+
    "\3\6\u016c\10\2\6\21\10\1\6\32\10\5\6\113\10"+
    "\3\6\13\10\7\6\15\10\1\6\4\10\3\0\13\6"+
    "\22\10\3\0\13\6\22\10\2\0\14\6\15\10\1\6"+
    "\3\10\1\6\2\0\14\6\64\10\40\0\3\6\1\10"+
    "\3\6\2\10\1\0\2\6\12\0\41\6\4\0\1\6"+
    "\12\0\6\6\131\10\7\6\5\10\2\0\42\10\1\0"+
    "\1\10\5\6\106\10\12\6\37\10\1\6\14\0\4\6"+
    "\14\0\12\6\12\0\36\10\2\6\5\10\13\6\54\10"+
    "\4\6\32\10\6\6\12\0\46\6\27\10\5\0\4\6"+
    "\65\10\12\0\1\6\35\0\2\6\13\0\6\6\12\0"+
    "\15\6\1\10\10\6\16\0\1\6\2\0\77\6\5\0"+
    "\57\10\21\0\7\10\4\6\12\0\21\6\11\0\14\6"+
    "\3\0\36\10\15\0\2\10\12\0\54\10\16\0\14\6"+
    "\44\10\24\0\10\6\12\0\3\6\3\10\12\0\44\10"+
    "\2\6\11\10\7\6\53\10\2\6\3\10\20\6\3\0"+
    "\1\6\25\0\4\10\1\0\6\10\1\0\2\10\3\0"+
    "\1\10\5\6\300\10\72\0\1\6\5\0\26\10\2\6"+
    "\6\10\2\6\46\10\2\6\6\10\2\6\10\10\1\6"+
    "\1\10\1\6\1\10\1\6\1\10\1\6\37\10\2\6"+
    "\65\10\1\6\7\10\1\6\1\10\3\6\3\10\1\6"+
    "\7\10\3\6\4\10\2\6\6\10\4\6\15\10\5\6"+
    "\3\10\1\6\7\10\16\6\5\0\30\6\2\3\5\0"+
    "\20\6\2\10\23\6\1\10\13\6\5\0\1\6\12\0"+
    "\1\6\1\10\15\6\1\10\20\6\15\10\3\6\40\10"+
    "\20\6\15\0\4\6\1\0\3\6\14\0\21\6\1\10"+
    "\4\6\1\10\2\6\12\10\1\6\1\10\3\6\5\10"+
    "\6\6\1\10\1\6\1\10\1\6\1\10\1\6\4\10"+
    "\1\6\13\10\2\6\4\10\5\6\5\10\4\6\1\10"+
    "\21\6\51\10\u0177\6\57\10\1\6\57\10\1\6\205\10"+
    "\6\6\4\10\3\0\2\10\14\6\46\10\1\6\1\10"+
    "\5\6\1\10\2\6\70\10\7\6\1\10\17\6\1\0"+
    "\27\10\11\6\7\10\1\6\7\10\1\6\7\10\1\6"+
    "\7\10\1\6\7\10\1\6\7\10\1\6\7\10\1\6"+
    "\7\10\1\6\40\0\57\6\1\10\325\6\3\10\31\6"+
    "\11\10\6\0\1\6\5\10\2\6\5\10\4\6\126\10"+
    "\2\6\2\0\2\6\3\10\1\6\132\10\1\6\4\10"+
    "\5\6\53\10\1\6\136\10\21\6\40\10\60\6\320\10"+
    "\100\6\375\10\3\6\215\10\103\6\56\10\2\6\15\10"+
    "\3\6\20\10\12\0\2\10\24\6\57\10\1\0\4\6"+
    "\12\0\1\6\37\10\2\0\120\10\2\0\45\6\11\10"+
    "\2\6\147\10\2\6\65\10\2\6\11\10\52\6\15\10"+
    "\1\0\3\10\1\0\4\10\1\0\27\10\5\0\4\6"+
    "\1\0\13\6\1\10\7\6\64\10\14\6\2\0\62\10"+
    "\22\0\12\6\12\0\6\6\22\0\6\10\3\6\1\10"+
    "\1\6\2\10\13\0\34\10\10\0\2\6\27\10\15\0"+
    "\14\6\35\10\3\6\4\0\57\10\16\0\16\6\1\10"+
    "\12\0\6\6\5\10\1\0\12\10\12\0\5\10\1\6"+
    "\51\10\16\0\11\6\3\10\1\0\10\10\2\0\2\6"+
    "\12\0\6\6\27\10\3\6\1\10\3\0\62\10\1\0"+
    "\1\10\3\0\2\10\2\0\5\10\2\0\1\10\1\0"+
    "\1\10\30\6\3\10\2\6\13\10\5\0\2\6\3\10"+
    "\2\0\12\6\6\10\2\6\6\10\2\6\6\10\11\6"+
    "\7\10\1\6\7\10\1\6\53\10\1\6\16\10\6\6"+
    "\163\10\10\0\1\6\2\0\2\6\12\0\6\6\244\10"+
    "\14\6\27\10\4\6\61\10\4\6\u0100\3\156\10\2\6"+
    "\152\10\46\6\7\10\14\6\5\10\5\6\1\10\1\0"+
    "\12\10\1\6\15\10\1\6\5\10\1\6\1\10\1\6"+
    "\2\10\1\6\2\10\1\6\154\10\41\6\153\10\22\6"+
    "\100\10\2\6\66\10\50\6\15\10\3\6\20\0\20\6"+
    "\20\0\3\6\2\10\30\6\3\10\31\6\1\10\6\6"+
    "\5\10\1\6\207\10\2\6\1\0\4\6\1\10\13\6"+
    "\12\0\7\6\32\10\4\6\1\10\1\6\32\10\13\6"+
    "\131\10\3\6\6\10\2\6\6\10\2\6\6\10\2\6"+
    "\3\10\3\6\2\10\3\6\2\10\22\6\3\0\4\6"+
    "\14\10\1\6\32\10\1\6\23\10\1\6\2\10\1\6"+
    "\17\10\2\6\16\10\42\6\173\10\105\6\65\10\210\6"+
    "\1\0\202\6\35\10\3\6\61\10\17\6\1\0\37\6"+
    "\40\10\15\6\36\10\5\6\46\10\5\0\5\6\36\10"+
    "\2\6\44\10\4\6\10\10\1\6\5\10\52\6\236\10"+
    "\2\6\12\0\6\6\44\10\4\6\44\10\4\6\50\10"+
    "\10\6\64\10\234\6\67\10\11\6\26\10\12\6\10\10"+
    "\230\6\6\10\2\6\1\10\1\6\54\10\1\6\2\10"+
    "\3\6\1\10\2\6\27\10\12\6\27\10\11\6\37\10"+
    "\101\6\23\10\1\6\2\10\12\6\26\10\12\6\32\10"+
    "\106\6\70\10\6\6\2\10\100\6\1\10\3\0\1\6"+
    "\2\0\5\6\4\0\4\10\1\6\3\10\1\6\35\10"+
    "\2\6\3\0\4\6\1\0\40\6\35\10\3\6\35\10"+
    "\43\6\10\10\1\6\34\10\2\0\31\6\66\10\12\6"+
    "\26\10\12\6\23\10\15\6\22\10\156\6\111\10\67\6"+
    "\63\10\15\6\63\10\15\6\44\10\4\0\10\6\12\0"+
    "\u0146\6\52\10\1\6\2\0\3\6\2\10\116\6\35\10"+
    "\12\6\1\10\10\6\26\10\13\0\137\6\25\10\33\6"+
    "\27\10\11\6\3\0\65\10\17\0\37\6\12\0\17\6"+
    "\4\0\55\10\13\0\2\6\1\0\17\6\1\0\2\6"+
    "\31\10\7\6\12\0\6\6\3\0\44\10\16\0\1\6"+
    "\12\0\4\6\1\10\2\0\1\10\10\6\43\10\1\0"+
    "\2\6\1\10\11\6\3\0\60\10\16\0\4\10\4\6"+
    "\4\0\1\6\14\0\1\10\1\6\1\10\43\6\22\10"+
    "\1\6\31\10\14\0\6\6\1\0\101\6\7\10\1\6"+
    "\1\10\1\6\4\10\1\6\17\10\1\6\12\10\7\6"+
    "\57\10\14\0\5\6\12\0\6\6\4\0\1\6\10\10"+
    "\2\6\2\10\2\6\26\10\1\6\7\10\1\6\2\10"+
    "\1\6\5\10\1\6\2\0\1\10\7\0\2\6\2\0"+
    "\2\6\3\0\2\6\1\10\6\6\1\0\5\6\5\10"+
    "\2\0\2\6\7\0\3\6\5\0\213\6\65\10\22\0"+
    "\4\10\5\6\12\0\4\6\1\0\3\10\36\6\60\10"+
    "\24\0\2\10\1\6\1\10\10\6\12\0\246\6\57\10"+
    "\7\0\2\6\11\0\27\6\4\10\2\0\42\6\60\10"+
    "\21\0\3\6\1\10\13\6\12\0\46\6\53\10\15\0"+
    "\1\10\7\6\12\0\66\6\33\10\2\6\17\0\4\6"+
    "\12\0\306\6\54\10\17\0\145\6\100\10\12\0\25\6"+
    "\10\10\2\6\1\10\2\6\10\10\1\6\2\10\1\6"+
    "\30\10\6\0\1\6\2\0\2\6\4\0\1\10\1\0"+
    "\1\10\2\0\14\6\12\0\106\6\10\10\2\6\47\10"+
    "\7\0\2\6\7\0\1\10\1\6\1\10\1\0\33\6"+
    "\1\10\12\0\50\10\7\0\1\10\4\0\10\6\1\0"+
    "\10\6\1\10\13\0\56\10\20\0\3\6\1\10\42\6"+
    "\71\10\7\6\11\10\1\6\45\10\10\0\1\6\10\0"+
    "\1\10\17\6\12\0\30\6\36\10\2\6\26\0\1\6"+
    "\16\0\111\6\7\10\1\6\2\10\1\6\46\10\6\0"+
    "\3\6\1\0\1\6\2\0\1\6\7\0\1\10\1\0"+
    "\10\6\12\0\6\6\6\10\1\6\2\10\1\6\40\10"+
    "\5\0\1\6\2\0\1\6\5\0\1\10\7\6\12\0"+
    "\u0136\6\23\10\4\0\271\6\1\10\54\6\4\10\37\6"+
    "\232\10\146\6\157\10\21\6\304\10\274\6\57\10\1\6"+
    "\11\0\307\6\107\10\271\6\71\10\7\6\37\10\1\6"+
    "\12\0\146\6\36\10\2\6\5\0\13\6\60\10\7\0"+
    "\11\6\4\10\14\6\12\0\11\6\25\10\5\6\23\10"+
    "\260\6\100\10\200\6\113\10\4\6\1\0\1\10\67\0"+
    "\7\6\4\0\15\10\100\6\2\10\1\6\1\10\1\0"+
    "\13\6\2\0\16\6\370\10\10\6\326\10\52\6\11\10"+
    "\367\6\37\10\61\6\3\10\21\6\4\10\10\6\u018c\10"+
    "\4\6\153\10\5\6\15\10\3\6\11\10\7\6\12\10"+
    "\3\6\2\0\1\6\4\0\301\6\5\0\3\6\26\0"+
    "\2\6\7\0\36\6\4\0\224\6\3\0\273\6\125\10"+
    "\1\6\107\10\1\6\2\10\2\6\1\10\2\6\2\10"+
    "\2\6\4\10\1\6\14\10\1\6\1\10\1\6\7\10"+
    "\1\6\101\10\1\6\4\10\2\6\10\10\1\6\7\10"+
    "\1\6\34\10\1\6\4\10\1\6\5\10\1\6\1\10"+
    "\3\6\7\10\1\6\u0154\10\2\6\31\10\1\6\31\10"+
    "\1\6\37\10\1\6\31\10\1\6\37\10\1\6\31\10"+
    "\1\6\37\10\1\6\31\10\1\6\37\10\1\6\31\10"+
    "\1\6\10\10\2\6\151\0\4\6\62\0\10\6\1\0"+
    "\16\6\1\0\26\6\5\0\1\6\17\0\120\6\7\0"+
    "\1\6\21\0\2\6\7\0\1\6\2\0\1\6\5\0"+
    "\325\6\55\10\3\6\7\0\7\10\2\6\12\0\4\6"+
    "\1\10\u0171\6\54\10\16\0\5\6\306\10\13\6\7\0"+
    "\51\6\104\10\7\0\1\10\4\6\12\0\u0156\6\1\10"+
    "\117\6\4\10\1\6\33\10\1\6\2\10\1\6\1\10"+
    "\2\6\1\10\1\6\12\10\1\6\4\10\1\6\1\10"+
    "\1\6\1\10\6\6\1\10\4\6\1\10\1\6\1\10"+
    "\1\6\1\10\1\6\3\10\1\6\2\10\1\6\1\10"+
    "\2\6\1\10\1\6\1\10\1\6\1\10\1\6\1\10"+
    "\1\6\1\10\1\6\2\10\1\6\1\10\2\6\4\10"+
    "\1\6\7\10\1\6\4\10\1\6\4\10\1\6\1\10"+
    "\1\6\12\10\1\6\21\10\5\6\3\10\1\6\5\10"+
    "\1\6\21\10\u0134\6\12\0\6\6\336\10\42\6\65\10"+
    "\13\6\336\10\2\6\u0182\10\16\6\u0131\10\37\6\36\10"+
    "\342\6\113\10\266\6\1\0\36\6\140\0\200\6\360\0"+
    "\20\6";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[31232];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\1\2\2\1\3\1\2\1\1\1\4\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\16\4"+
    "\1\16\1\17\1\1\1\0\1\4\1\20\6\4\1\21"+
    "\3\4\1\22\6\4\2\23\2\20\1\4\1\24\3\4"+
    "\1\25\1\26\1\27\1\30\7\4\1\31\1\32\4\4"+
    "\1\33\1\34\1\35\1\4\1\36\3\4\1\37\1\40"+
    "\1\41\1\42";

  private static int [] zzUnpackAction() {
    int [] result = new int[92];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\52\0\52\0\124\0\124\0\176\0\250\0\322"+
    "\0\52\0\52\0\52\0\374\0\52\0\u0126\0\374\0\52"+
    "\0\52\0\u0150\0\u017a\0\u01a4\0\u01ce\0\u01f8\0\u0222\0\u024c"+
    "\0\u0276\0\u02a0\0\u02ca\0\u02f4\0\u031e\0\u0348\0\u0372\0\52"+
    "\0\52\0\u039c\0\u03c6\0\u03f0\0\u041a\0\u0444\0\u046e\0\u0498"+
    "\0\u04c2\0\u04ec\0\u0516\0\322\0\u0540\0\u056a\0\u0594\0\322"+
    "\0\u05be\0\u05e8\0\u0612\0\u063c\0\u0666\0\u0690\0\52\0\124"+
    "\0\124\0\u06ba\0\u06e4\0\322\0\u070e\0\u0738\0\u0762\0\322"+
    "\0\322\0\322\0\322\0\u078c\0\u07b6\0\u07e0\0\u080a\0\u0834"+
    "\0\u085e\0\u0888\0\322\0\322\0\u08b2\0\u08dc\0\u0906\0\u0930"+
    "\0\322\0\322\0\322\0\u095a\0\322\0\u0984\0\u09ae\0\u09d8"+
    "\0\322\0\322\0\322\0\322";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[92];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\4\1\6\1\2\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\2\1\23\1\24\2\10\1\25"+
    "\1\26\2\10\1\27\1\10\1\30\1\31\1\32\1\33"+
    "\1\34\1\35\1\36\1\10\1\37\1\40\1\41\1\5"+
    "\2\2\4\0\43\2\55\0\1\4\47\0\2\42\1\0"+
    "\2\43\1\0\1\42\1\2\13\42\1\2\25\42\1\43"+
    "\1\10\1\2\4\0\2\2\1\10\6\2\1\10\2\2"+
    "\1\10\1\2\23\10\2\2\1\44\2\2\4\0\11\2"+
    "\1\17\31\2\1\0\2\2\4\0\10\2\1\45\32\2"+
    "\1\0\1\10\1\2\4\0\2\2\1\10\6\2\1\10"+
    "\2\2\1\10\1\2\20\10\1\46\2\10\2\2\1\44"+
    "\1\10\1\2\4\0\2\2\1\10\6\2\1\10\2\2"+
    "\1\10\1\2\13\10\1\47\7\10\2\2\1\44\1\10"+
    "\1\2\4\0\2\2\1\10\6\2\1\10\2\2\1\10"+
    "\1\2\14\10\1\50\6\10\2\2\1\44\1\10\1\2"+
    "\4\0\2\2\1\10\6\2\1\10\2\2\1\10\1\2"+
    "\11\10\1\51\11\10\2\2\1\44\1\10\1\2\4\0"+
    "\2\2\1\10\6\2\1\10\2\2\1\10\1\2\1\52"+
    "\13\10\1\53\6\10\2\2\1\44\1\10\1\2\4\0"+
    "\2\2\1\10\6\2\1\10\2\2\1\10\1\2\5\10"+
    "\1\54\5\10\1\55\7\10\2\2\1\44\1\10\1\2"+
    "\4\0\2\2\1\10\6\2\1\10\2\2\1\10\1\2"+
    "\14\10\1\56\6\10\2\2\1\44\1\10\1\2\4\0"+
    "\2\2\1\10\6\2\1\10\2\2\1\10\1\2\14\10"+
    "\1\57\6\10\2\2\1\44\1\10\1\2\4\0\2\2"+
    "\1\10\6\2\1\10\2\2\1\10\1\2\16\10\1\60"+
    "\4\10\2\2\1\44\1\10\1\2\4\0\2\2\1\10"+
    "\6\2\1\10\2\2\1\10\1\2\16\10\1\61\4\10"+
    "\2\2\1\44\1\10\1\2\4\0\2\2\1\10\6\2"+
    "\1\10\2\2\1\10\1\2\4\10\1\62\16\10\2\2"+
    "\1\44\1\10\1\2\4\0\2\2\1\10\6\2\1\10"+
    "\2\2\1\10\1\2\20\10\1\63\2\10\2\2\1\44"+
    "\1\10\1\2\4\0\2\2\1\10\6\2\1\10\2\2"+
    "\1\10\1\2\7\10\1\64\6\10\1\65\4\10\2\2"+
    "\1\44\1\10\1\2\4\0\2\2\1\10\6\2\1\10"+
    "\2\2\1\10\1\2\14\10\1\66\6\10\2\2\1\44"+
    "\2\42\1\0\2\43\1\0\1\42\1\67\13\42\1\2"+
    "\25\42\3\43\1\0\2\43\1\0\1\43\1\70\13\43"+
    "\1\0\26\43\1\44\7\0\1\44\6\0\1\44\2\0"+
    "\1\44\1\0\23\44\2\0\1\44\2\45\1\71\2\45"+
    "\1\72\44\45\1\10\1\2\4\0\2\2\1\10\6\2"+
    "\1\10\2\2\1\10\1\2\16\10\1\73\4\10\2\2"+
    "\1\44\1\10\1\2\4\0\2\2\1\10\6\2\1\10"+
    "\2\2\1\10\1\2\3\10\1\74\17\10\2\2\1\44"+
    "\1\10\1\2\4\0\2\2\1\10\6\2\1\10\2\2"+
    "\1\10\1\2\14\10\1\75\6\10\2\2\1\44\1\10"+
    "\1\2\4\0\2\2\1\10\6\2\1\10\2\2\1\10"+
    "\1\2\17\10\1\76\3\10\2\2\1\44\1\10\1\2"+
    "\4\0\2\2\1\10\6\2\1\10\2\2\1\10\1\2"+
    "\11\10\1\77\11\10\2\2\1\44\1\10\1\2\4\0"+
    "\2\2\1\10\6\2\1\10\2\2\1\10\1\2\16\10"+
    "\1\100\4\10\2\2\1\44\1\10\1\2\4\0\2\2"+
    "\1\10\6\2\1\10\2\2\1\10\1\2\20\10\1\101"+
    "\2\10\2\2\1\44\1\10\1\2\4\0\2\2\1\10"+
    "\6\2\1\10\2\2\1\10\1\2\3\10\1\102\17\10"+
    "\2\2\1\44\1\10\1\2\4\0\2\2\1\10\6\2"+
    "\1\10\2\2\1\10\1\2\20\10\1\103\2\10\2\2"+
    "\1\44\1\10\1\2\4\0\2\2\1\10\6\2\1\10"+
    "\2\2\1\10\1\2\10\10\1\104\12\10\2\2\1\44"+
    "\1\10\1\2\4\0\2\2\1\10\6\2\1\10\2\2"+
    "\1\10\1\2\20\10\1\105\2\10\2\2\1\44\1\10"+
    "\1\2\4\0\2\2\1\10\6\2\1\10\2\2\1\10"+
    "\1\2\16\10\1\106\4\10\2\2\1\44\1\10\1\2"+
    "\4\0\2\2\1\10\6\2\1\10\2\2\1\10\1\2"+
    "\4\10\1\107\16\10\2\2\1\44\1\10\1\2\4\0"+
    "\2\2\1\10\6\2\1\10\2\2\1\10\1\2\21\10"+
    "\1\110\1\10\2\2\1\44\1\10\1\2\4\0\2\2"+
    "\1\10\6\2\1\10\2\2\1\10\1\2\10\10\1\111"+
    "\12\10\2\2\1\44\2\0\1\71\47\0\1\10\1\2"+
    "\4\0\2\2\1\10\6\2\1\10\2\2\1\10\1\2"+
    "\10\10\1\112\12\10\2\2\1\44\1\10\1\2\4\0"+
    "\2\2\1\10\6\2\1\10\2\2\1\10\1\2\11\10"+
    "\1\113\11\10\2\2\1\44\1\10\1\2\4\0\2\2"+
    "\1\10\6\2\1\10\2\2\1\10\1\2\4\10\1\114"+
    "\16\10\2\2\1\44\1\10\1\2\4\0\2\2\1\10"+
    "\6\2\1\10\2\2\1\10\1\2\17\10\1\115\3\10"+
    "\2\2\1\44\1\10\1\2\4\0\2\2\1\10\6\2"+
    "\1\10\2\2\1\10\1\2\13\10\1\116\7\10\2\2"+
    "\1\44\1\10\1\2\4\0\2\2\1\10\6\2\1\10"+
    "\2\2\1\10\1\2\21\10\1\117\1\10\2\2\1\44"+
    "\1\10\1\2\4\0\2\2\1\10\6\2\1\10\2\2"+
    "\1\10\1\2\21\10\1\120\1\10\2\2\1\44\1\10"+
    "\1\2\4\0\2\2\1\10\6\2\1\10\2\2\1\10"+
    "\1\2\13\10\1\121\7\10\2\2\1\44\1\10\1\2"+
    "\4\0\2\2\1\10\6\2\1\10\2\2\1\10\1\2"+
    "\4\10\1\122\16\10\2\2\1\44\1\10\1\2\4\0"+
    "\2\2\1\10\6\2\1\10\2\2\1\10\1\2\3\10"+
    "\1\123\17\10\2\2\1\44\1\10\1\2\4\0\2\2"+
    "\1\10\6\2\1\10\2\2\1\10\1\2\13\10\1\124"+
    "\7\10\2\2\1\44\1\10\1\2\4\0\2\2\1\10"+
    "\6\2\1\10\2\2\1\10\1\2\4\10\1\125\16\10"+
    "\2\2\1\44\1\10\1\2\4\0\2\2\1\10\6\2"+
    "\1\10\2\2\1\10\1\2\20\10\1\126\2\10\2\2"+
    "\1\44\1\10\1\2\4\0\2\2\1\10\6\2\1\10"+
    "\2\2\1\10\1\2\16\10\1\127\4\10\2\2\1\44"+
    "\1\10\1\2\4\0\2\2\1\10\6\2\1\10\2\2"+
    "\1\10\1\2\2\10\1\130\20\10\2\2\1\44\1\10"+
    "\1\2\4\0\2\2\1\10\6\2\1\10\2\2\1\10"+
    "\1\2\6\10\1\131\14\10\2\2\1\44\1\10\1\2"+
    "\4\0\2\2\1\10\6\2\1\10\2\2\1\10\1\2"+
    "\5\10\1\132\15\10\2\2\1\44\1\10\1\2\4\0"+
    "\2\2\1\10\6\2\1\10\2\2\1\10\1\2\13\10"+
    "\1\133\7\10\2\2\1\44\1\10\1\2\4\0\2\2"+
    "\1\10\6\2\1\10\2\2\1\10\1\2\20\10\1\134"+
    "\2\10\2\2\1\44";

  private static int [] zzUnpackTrans() {
    int [] result = new int[2562];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\1\2\11\35\1\1\0\24\1\2\11\43\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[92];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
StringBuffer stringBuffer = new StringBuffer();

public static void main(String[] args) throws FileNotFoundException, IOException{
            FileReader yyin = new FileReader(args[0]);
            Yylex yy = new Yylex(yyin);
            Yytoken t;
            while ((t = yy.yylex()) != null)
                System.out.println(t.type);
}


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Yylex(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public Yytoken yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return new Yytoken("ERROR");
            }
            // fall through
          case 35: break;
          case 2:
            { /* ignore */
            }
            // fall through
          case 36: break;
          case 3:
            { throw new Error("Illegal character <"+
                                                yytext()+">");
            }
            // fall through
          case 37: break;
          case 4:
            { return new Yytoken("IDENTIFIER");
            }
            // fall through
          case 38: break;
          case 5:
            { return new Yytoken("OPENBRACE");
            }
            // fall through
          case 39: break;
          case 6:
            { return new Yytoken("CLOSEBRACE");
            }
            // fall through
          case 40: break;
          case 7:
            { return new Yytoken("MUL");
            }
            // fall through
          case 41: break;
          case 8:
            { return new Yytoken("PLUS");
            }
            // fall through
          case 42: break;
          case 9:
            { return new Yytoken("MINUS");
            }
            // fall through
          case 43: break;
          case 10:
            { return new Yytoken("DIV");
            }
            // fall through
          case 44: break;
          case 11:
            { String t = yytext();
                            char s = t.charAt(0);
                            if(s == '+'){
                               if(Integer.valueOf(t)<32768){
                                      return new Yytoken("DIGIT");
                                    }else{
                                      return new Yytoken("ERROR");
                                    }
                                  
                                }else{
                              return new Yytoken("ERROR");
                            }
            }
            // fall through
          case 45: break;
          case 12:
            { return new Yytoken("ENDSTATEMENT");
            }
            // fall through
          case 46: break;
          case 13:
            { return new Yytoken("EQ");
            }
            // fall through
          case 47: break;
          case 14:
            { return new Yytoken("OPENCURLY");
            }
            // fall through
          case 48: break;
          case 15:
            { return new Yytoken("CLOSECURLY");
            }
            // fall through
          case 49: break;
          case 16:
            { return new Yytoken("COMMENT");
            }
            // fall through
          case 50: break;
          case 17:
            { return new Yytoken("IF");
            }
            // fall through
          case 51: break;
          case 18:
            { return new Yytoken("OR");
            }
            // fall through
          case 52: break;
          case 19:
            { return new Yytoken("STRING_LITERAL");
            }
            // fall through
          case 53: break;
          case 20:
            { return new Yytoken("AND");
            }
            // fall through
          case 54: break;
          case 21:
            { return new Yytoken("FOR");
            }
            // fall through
          case 55: break;
          case 22:
            { return new Yytoken("INT");
            }
            // fall through
          case 56: break;
          case 23:
            { return new Yytoken("MOD");
            }
            // fall through
          case 57: break;
          case 24:
            { return new Yytoken("NOT");
            }
            // fall through
          case 58: break;
          case 25:
            { return new Yytoken("BOOL");
            }
            // fall through
          case 59: break;
          case 26:
            { return new Yytoken("ELSE");
            }
            // fall through
          case 60: break;
          case 27:
            { return new Yytoken("THEN");
            }
            // fall through
          case 61: break;
          case 28:
            { return new Yytoken("TRUE");
            }
            // fall through
          case 62: break;
          case 29:
            { return new Yytoken("VOID");
            }
            // fall through
          case 63: break;
          case 30:
            { return new Yytoken("FALSE");
            }
            // fall through
          case 64: break;
          case 31:
            { return new Yytoken("STRING");
            }
            // fall through
          case 65: break;
          case 32:
            { return new Yytoken("PRINTF");
            }
            // fall through
          case 66: break;
          case 33:
            { return new Yytoken("RETURN");
            }
            // fall through
          case 67: break;
          case 34:
            { return new Yytoken("STRUCT");
            }
            // fall through
          case 68: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
